// CommonJS –≤–µ—Ä—Å–∏—è ‚Äî –Ω–µ –∑–∞–±—ã–≤–∞–π –∑–∞–¥–∞—Ç—å BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
const TelegramBot = require('node-telegram-bot-api');

const token = process.env.BOT_TOKEN;
if (!token) {
  console.error('ERROR: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
  process.exit(1);
}

// –ü–æ–º–µ–Ω—è–π –Ω–∞ URL —Å–≤–æ–µ–≥–æ GitHub Pages (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å trailing slash '/')
const WEBAPP_URL = 'https://<your-github-username>.github.io/tg-city-cases/';

const bot = new TelegramBot(token, { polling: true });

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –ñ–º–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å¬ª üëá', {
    reply_markup: {
      keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å', web_app: { url: WEBAPP_URL } }]],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  });
});

// –ü–æ–ª—É—á–∞–µ–º web_app_data (tg.sendData) –∏–∑ –º–∏–Ω–∏-–∞–ø–ø–∞
bot.on('message', async (msg) => {
  if (!msg.web_app_data) return;
  try {
    const payload = JSON.parse(msg.web_app_data.data);
    if (payload.action === 'claim') {
      const caption = `–¢–≤–æ—è –∫–∞—Ä—Ç–∞: <b>${payload.title}</b>\n–†–µ–¥–∫–æ—Å—Ç—å: <b>${payload.rarity?.toUpperCase() || ''}</b>`;
      const imgUrl = `${WEBAPP_URL}${payload.image}`;
      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ —Ñ–æ—Ç–æ
      await bot.sendPhoto(msg.chat.id, imgUrl, { caption, parse_mode: 'HTML' });
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ web_app_data:', e);
  }
});
